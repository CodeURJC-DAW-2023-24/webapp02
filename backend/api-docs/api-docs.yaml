openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8443
  description: Generated server url
paths:
  /api/users/{id}:
    get:
      tags:
      - user-api-controller
      operationId: getSpecificUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: USER ID CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: USER not found
    put:
      tags:
      - user-api-controller
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "401":
          description: Unauthorized
        "200":
          description: USER PUT CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: USER not found
    delete:
      tags:
      - user-api-controller
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid id supplied
        "200":
          description: USER DELETE CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: USER not found
  /api/users/{id}/image:
    get:
      tags:
      - user-api-controller
      operationId: getUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "404":
          description: USER image not found
        "200":
          description: USER ID CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
    put:
      tags:
      - user-api-controller
      operationId: updateUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - profileImage
              type: object
              properties:
                profileImage:
                  type: string
                  format: binary
      responses:
        "401":
          description: Unauthorized
        "200":
          description: USER IMAGE PUT CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: USER not found
    post:
      tags:
      - user-api-controller
      operationId: uploadUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - profileImage
              type: object
              properties:
                profileImage:
                  type: string
                  format: binary
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid id supplied
        "201":
          description: USER IMAGE POST CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: USER not found
    delete:
      tags:
      - user-api-controller
      operationId: deleteUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "200":
          description: USER IMAGE DELETE CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: USER not found
  /api/series/{id}:
    get:
      tags:
      - series-api-controller
      operationId: getSeriesById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: SERIE ID CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: Serie not found
        "400":
          description: Invalid id supplied
    put:
      tags:
      - series-api-controller
      operationId: updateSerie
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementDTO'
        required: true
      responses:
        "404":
          description: Serie not found
        "400":
          description: Invalid id supplied
        "200":
          description: SERIE PUT CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
    delete:
      tags:
      - series-api-controller
      operationId: deleteSerie
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "404":
          description: Serie not found
        "400":
          description: Invalid id supplied
        "200":
          description: SERIE DELETE CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
  /api/series/{id}/image:
    get:
      tags:
      - series-api-controller
      operationId: getSerieImageById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Serie not found
        "200":
          description: SERIE IMAGE ID CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
    put:
      tags:
      - series-api-controller
      operationId: updateSerieImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: SERIE IMAGE PUT CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: Serie not found
        "400":
          description: Invalid id supplied
    post:
      tags:
      - series-api-controller
      operationId: uploadSerieImageById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "201":
          description: SERIE IMAGE PUT CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: Serie not found
        "400":
          description: Invalid id supplied
    delete:
      tags:
      - series-api-controller
      operationId: deleteSerieImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "404":
          description: Serie not found
        "200":
          description: SERIE IMAGE DELETE CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
  /api/films/{id}:
    get:
      tags:
      - film-api-controller
      operationId: getFilmsById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: FILM ID CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: Film not found
    put:
      tags:
      - film-api-controller
      operationId: updateFilm
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementDTO'
        required: true
      responses:
        "200":
          description: FILM PUT CORRECTLY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: Film not found
    delete:
      tags:
      - film-api-controller
      operationId: deleteFilm
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "200":
          description: FILM DELETED CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: FILM not found
  /api/films/{id}/image:
    get:
      tags:
      - film-api-controller
      operationId: getFilmImageById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: FILM IMAGE CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: Film not found
    put:
      tags:
      - film-api-controller
      operationId: updateFilmImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: FILM IMAGE PUT CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: Film not found
    post:
      tags:
      - film-api-controller
      operationId: uploadFilmImageById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "201":
          description: FILM IMAGE POST CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
        "404":
          description: Film not found
    delete:
      tags:
      - film-api-controller
      operationId: deleteFilmImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "400":
          description: Invalid id supplied
        "200":
          description: FILM IMAGE DELETE CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: Film not found
  /api/books/{id}:
    get:
      tags:
      - book-api-controller
      operationId: getBookById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: BOOK FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: Book not found
        "400":
          description: Invalid id supplied
    put:
      tags:
      - book-api-controller
      operationId: updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementDTO'
        required: true
      responses:
        "404":
          description: Book not found
        "400":
          description: Invalid id supplied
        "200":
          description: BOOK PUT CORRECTLY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
    delete:
      tags:
      - book-api-controller
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "404":
          description: Book not found
        "200":
          description: BOOK DELETED CORRECTLY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
  /api/books/{id}/image:
    get:
      tags:
      - book-api-controller
      operationId: getBookImageById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Book image not found
        "400":
          description: Invalid id supplied
        "200":
          description: GET BOOK IMAGE CORRECTLY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
    put:
      tags:
      - book-api-controller
      operationId: updateBookImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "404":
          description: Book not found
        "200":
          description: BOOK IMAGE PUT CORRECTLY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
    post:
      tags:
      - book-api-controller
      operationId: uploadBookImageById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "201":
          description: BOOK IMAGE POSTED CORRECTLY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: Book not found
        "400":
          description: Invalid id supplied
    delete:
      tags:
      - book-api-controller
      operationId: deleteBookImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "401":
          description: Unauthorized
        "404":
          description: Book not found
        "200":
          description: BOOK IMAGE DELETED CORRECTLY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "400":
          description: Invalid id supplied
  /api/users/:
    get:
      tags:
      - user-api-controller
      operationId: getUsers
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
    post:
      tags:
      - user-api-controller
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/series/:
    get:
      tags:
      - series-api-controller
      operationId: getSeries
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageElement'
    post:
      tags:
      - series-api-controller
      operationId: uploadSerie
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementDTO'
        required: true
      responses:
        "201":
          description: SERIE POST CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: Serie not found
        "400":
          description: Invalid id supplied
  /api/films/:
    get:
      tags:
      - film-api-controller
      operationId: getFilms
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageElement'
    post:
      tags:
      - film-api-controller
      operationId: uploadFilm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementDTO'
        required: true
      responses:
        "404":
          description: Book not found
        "400":
          description: Invalid id supplied
        "201":
          description: FILM POST CORRECT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
  /api/books/:
    get:
      tags:
      - book-api-controller
      operationId: getBooks
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageElement'
    post:
      tags:
      - book-api-controller
      operationId: uploadBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElementDTO'
        required: true
      responses:
        "201":
          description: BOOK POSTED CORRECTLY
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        "404":
          description: Book not found
        "400":
          description: Invalid id supplied
  /api/auth/refresh:
    post:
      tags:
      - login-controller
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/logout:
    post:
      tags:
      - login-controller
      operationId: logOut
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
      - login-controller
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /downloadNames:
    get:
      tags:
      - controller-principal
      operationId: downloadNames
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/elements/types:
    get:
      tags:
      - element-api-controller
      operationId: getTypes
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - PELICULA
                  - SERIE
                  - LIBRO
  /api/elements/states:
    get:
      tags:
      - element-api-controller
      operationId: getState
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - COMPLETO
                  - EN_EMISION
                  - POR_ESTRENARSE
  /api/elements/season:
    get:
      tags:
      - element-api-controller
      operationId: getSeason
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - OTOÑO
                  - INVIERNO
                  - PRIMAVERA
                  - VERANO
  /api/elements/genres:
    get:
      tags:
      - element-api-controller
      operationId: getGenres
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - ACCION
                  - TERROR
                  - AVENTURA
                  - MISTERIO
                  - ROMANCE
                  - CIENCIAFICCION
                  - DRAMA
                  - INFANTIL
                  - COMEDIA
                  - FANTASIA
                  - SOBRENATURAL
                  - NOVELA
                  - JUVENIL
  /api/books/top:
    get:
      tags:
      - book-api-controller
      operationId: getTop5Books
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageElement'
components:
  schemas:
    UserDTO:
      type: object
      properties:
        name:
          type: string
        roles:
          type: array
          items:
            type: string
        password:
          type: string
    Element:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        author:
          type: string
        year:
          type: integer
          format: int32
        type:
          type: string
        season:
          type: string
        state:
          type: string
        country:
          type: string
        base64Image:
          type: string
        generos:
          type: array
          items:
            type: string
    ElementDTO:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        author:
          type: string
        year:
          type: integer
          format: int32
        type:
          type: string
        season:
          type: string
        state:
          type: string
        country:
          type: string
        genres:
          type: array
          items:
            type: string
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageUser:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        roles:
          type: array
          items:
            type: string
        elements:
          type: array
          items:
            $ref: '#/components/schemas/Element'
    PageElement:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Element'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
